import os
from flask import Flask, render_template, request
import pandas as pd
import pickle

app = Flask(__name__)

# --- FIX: Build an absolute path to the model file ---
# This makes sure your app can find the model file in Vercel's environment
current_dir = os.path.dirname(os.path.realpath(__file__))
model_path = os.path.join(current_dir, 'RidgeModel1.pkl')

# Load the model using the correct path
with open(model_path, 'rb') as f:
    pipe = pickle.load(f)
# ----------------------------------------------------

@app.route('/')
def index():
    # Dropdown values are hardcoded to avoid reading files
    bedrooms = [1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15]
    bathrooms = [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 8.5, 9.0]
    sizes = sorted([2590.0, 2240.0, 2040.0, 3800.0, 1042.0, 1190.0, 670.0, 4510.0, 1520.0, 2340.0, 1320.0, 1800.0, 2490.0, 2650.0, 2560.0, 900.0, 1360.0, 550.0, 2974.0, 1989.0, 1332.0, 2668.0, 770.0, 1280.0, 3200.0, 889.0, 508.0, 3140.0, 2000.0, 792.0, 1690.0, 3000.0, 1550.0, 871.0, 1940.0, 474.0, 1770.0, 2510.0, 750.0, 573.0, 1500.0, 2920.0, 2817.0, 617.0, 1523.0, 1240.0, 2280.0, 3590.0, 2478.0, 2360.0, 720.0, 2480.0, 780.0, 2820.0, 2900.0, 1092.0, 1731.0, 1344.0, 4040.0, 2320.0, 1070.0, 1113.0, 2100.0, 2620.0, 1270.0, 2702.0, 2031.0, 2350.0, 2640.0, 1340.0, 8660.0, 1365.0, 635.0, 870.0, 776.0, 820.0, 2580.0, 875.0, 2220.0, 607.0, 1496.0, 2670.0, 1810.0, 582.0, 1006.0, 1530.0, 1960.0, 2110.0, 3010.0, 1820.0, 3040.0, 800.0, 956.0, 756.0, 742.0, 1607.0, 3057.0, 649.0, 3142.0, 1050.0, 1720.0, 2680.0, 2550.0, 9.0, 11010.0, 773.0, 589.0, 510.0, 2661.0, 843.0, 2250.0, 2080.0, 1370.0, 699.0, 1840.0, 858.0, 3110.0, 1147.0, 868.0, 1538.0, 932.0, 981.0, 866.0, 1470.0, 1290.0, 1670.0, 630.0, 1880.0, 1188.0, 1300.0, 857.0, 2810.0, 2400.0, 2734.0, 1120.0, 3960.0, 2030.0, 2370.0, 813.0, 626.0, 1660.0, 2870.0, 994.0, 1172.0, 1806.0, 3060.0, 3820.0, 1328.0, 1080.0, 1230.0, 1422.0, 3956.0, 3620.0, 189.0, 700.0, 1824.0, 3020.0, 3400.0, 917.0, 904.0, 1460.0, 2029.0, 2867.0, 1180.0, 1920.0, 2500.0, 1540.0, 2570.0, 1018.0, 540700.0, 640.0, 2760.0, 2190.0, 2780.0, 613.0, 1566.0, 1245.0, 2720.0, 3260.0, 2380.0, 1884.0, 1712.0, 1196.0, 1098.0, 1250.0, 880.0, 822.0, 1595.0, 3190.0, 1465.0, 683.0, 2430.0, 1128.0, 2360.0, 1396.0, 615.0, 2980.0, 2140.0, 1390.0, 712.0, 1850.0, 1710.0, 970.0, 1606.0, 1815.0, 3030.0, 570.0, 1600.0, 1570.0, 3560.0, 3210.0, 3290.0, 2899.0, 3360.0, 2180.0, 681.0, 1010.0, 1635.0, 1022.0, 990.0, 1164.0, 583.0, 888.0, 2530.0, 3542.0, 1011.0, 1088.0, 3785.0, 1968.0, 610.0, 1346.0, 1580.0, 2020.0, 1630.0, 4490.0, 2118.0, 2310.0, 1964.0, 2410.0, 1030.0, 1996.0, 781.0, 1517.0, 1095.0, 1146.0, 2067.0, 724.0, 1640.0, 804.0, 434.0, 2730.0, 2230.0, 3120.0, 996.0, 1915.0, 1213.0, 1740.0, 1700.0, 1909.0, 376.0, 2470.0, 2520.0, 1201.0, 1450.0, 2803.0, 2943.0, 2160.0, 2010.0, 1094.0, 1160.0, 2630.0, 1425.0, 1490.0, 1610.0, 2270.0, 2092.0, 1885.0, 2260.0, 886.0, 1048.0, 2170.0, 1620.0, 2860.0, 1410.0, 1560.0, 1440.0, 1760.0, 1131.0, 1021.0, 1330.0, 1212.0, 2060.0, 1060.0, 1750.0, 2390.0, 2540.0, 1090.0, 2600.0, 1730.0, 1718.0, 2200.0, 1990.0, 840.0, 854.0, 1150.0, 1510.0, 1027.0, 2015.0, 1563.0, 2070.0, 3310.0, 2050.0, 1260.0, 1415.0, 2790.0, 1140.0, 3610.0, 1514.0, 672.0, 2212.0, 1380.0, 1616.0, 1590.0, 1870.0, 1780.0, 2970.0, 1177.0, 2300.0, 1790.0, 1040.0, 3300.0, 1038.0, 2120.0, 1400.0, 2910.0, 1681.0, 648.0, 1228.0, 3488.0, 2420.0, 1980.0, 3410.0, 1641.0, 1512.0, 696.0, 1297.0, 1910.0, 1586.0, 1860.0, 2840.0, 980.0, 1000.0, 1225.0, 1758.0, 1350.0, 1187.0, 2529.0, 916.0, 2714.0, 1004.0, 896.0, 903.0, 1403.0, 2440.0, 3050.0, 2330.0, 2130.0, 2178.0, 1261.0, 1353.0, 2447.0, 4210.0, 1970.0, 2960.0, 1893.0, 1115.0, 3707.0, 2304.0, 4018.0, 1813.0, 1454.0, 950.0, 2830.0, 1604.0, 1411.0, 3940.0, 4639.0, 4299.0, 1420.0, 667.0, 836.0, 1324.0, 2131.0, 1152.0, 1112.0, 1799.0, 4194.0, 1057.0, 2777.0, 924.0, 3240.0, 1455.0, 1596.0, 1101.0, 1015.0, 1020.0, 1159.0, 2164.0, 1110.0, 2172.0, 1210.0, 1650.0, 1387.0, 1130.0, 1573.0, 2150.0, 2037.0, 1657.0, 993.0, 1622.0, 1065.0, 1711.0, 3270.0, 1086.0, 1252.0, 1163.0, 940.0, 1482.0, 1569.0, 1167.0, 1307.0, 3815.0, 1199.0, 1881.0, 3340.0, 1192.0, 1174.0, 3130.0, 703.0, 1687.0, 2450.0, 1036.0, 3105.0, 1930.0, 1676.0, 3090.0, 1705.0, 1354.0, 2754.0, 2074.0, 2966.0, 1865.0, 1817.0, 3070.0, 3880.0, 3530.0, 1443.0, 1555.0, 3636.0, 1035.0, 1155.0, 1291.0, 1429.0, 531.0, 1137.0, 1200.0, 2011.0, 2949.0, 2930.0, 1978.0, 2880.0, 3325.0, 4397.0, 3220.0, 3335.0, 3700.0, 2852.0, 1019.0, 2299.0, 2667.0, 2466.0, 1124.0, 4260.0, 2634.0, 605.0, 1759.0, 2213.0, 3280.0, 2793.0, 2191.0, 1939.0, 1615.0, 2610.0, 966.0, 3495.0, 1242.0, 644.0, 1679.0, 878.0, 2425.0, 1448.0, 1861.0, 3320.0, 1209.0, 3180.0, 808.0, 834.0, 1217.0, 3490.0, 3080.0, 1763.0, 4180.0, 1761.0, 2700.0, 1379.0, 4006.0, 2940.0, 1684.0, 1076.0, 603.0, 1742.0, 1548.0, 816.0, 616.0, 2282.0, 812.0, 2352.0, 3100.0, 1286.0, 2288.0, 1503.0, 3228.0, 930.0, 1143.0, 1936.0, 718.0, 2354.0, 3680.0, 3136.0, 1437.0, 2567.0, 1433.0, 3463.0, 1073.0, 1319.0, 2750.0, 2297.0, 2284.0, 3064.0, 1352.0, 3380.0, 1649.0, 968.0, 709.0, 3750.0, 920.0, 1644.0, 1276.0, 1372.0, 4002.0, 1226.0, 3487.0, 2783.0, 4570.0, 830.0, 3460.0, 1565.0, 1545.0, 2285.0, 2770.0, 460.0, 1386.0, 2090.0, 982.0, 2311.0, 1889.0, 1941.0, 3600.0, 704.0, 2188.0, 3780.0, 1576.0, 1248.0, 1749.0, 1071.0, 1699.0, 850.0, 807.0, 2050.0, 1632.0, 1096.0, 1631.0, 905.0, 2659.0, 2353.0, 2850.0, 2336.0, 3556.0, 614.0, 1894.0, 985.0, 1125.0, 789.0, 627.0, 1878.0, 636.0, 1413.0, 806.0, 3450.0, 1111.0, 1524.0, 1149.0, 1106.0, 650.0, 693.0, 1302.0, 4641.0, 5200.0, 2795.0, 475.0, 960.0, 723.0, 1009.0, 3710.0, 4050.0, 3660.0, 4990.0, 1900.0, 5770.0, 4693.0, 5690.0, 4060.0, 4190.0, 3036.0, 7636.0, 6240.0, 1160000.0, 1736.0, 4530.0, 4790.0, 2437.0, 6990.0, 5090.0, 5704.0, 5020.0, 4350.0])
    zip_codes = [98101, 98102, 98103, 98104, 98105, 98106, 98107, 98108, 98109, 98112, 98115, 98116, 98117, 98118, 98119, 98121, 98122, 98125, 98126, 98133, 98136, 98144, 98146, 98164, 98168, 98177, 98178, 98199]
    
    return render_template('index.html', bedrooms=bedrooms, bathrooms=bathrooms, sizes=sizes, zip_codes=zip_codes)

@app.route('/predict', methods=['POST'])
def predict():
    bedrooms = request.form.get('beds')
    bathrooms = request.form.get('baths')
    size = request.form.get('size')
    zipcode = request.form.get('zip_code')

    # Create a DataFrame with the input data
    input_data = pd.DataFrame([[bedrooms, bathrooms, size, zipcode]],
                               columns=['beds', 'baths', 'size', 'zip_code'])

    # Convert input data to numeric types
    input_data = input_data.astype({'beds': int, 'baths': float, 'size': float, 'zip_code': int})
    
    # Predict the price
    prediction = pipe.predict(input_data)[0]

    return str(round(prediction))

if __name__ == "__main__":
    app.run(debug=True, port=5000)
